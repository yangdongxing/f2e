<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>丁香园前端小分队</title>
    <link>http://dxy-developer.github.io/f2e/tags/tdz/index.xml</link>
    <description>Recent content on 丁香园前端小分队</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Establishment · 丁香园前端</copyright>
    <atom:link href="http://dxy-developer.github.io/f2e/tags/tdz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>javascript 中 TDZ 的理解</title>
      <link>http://dxy-developer.github.io/f2e/blog/2017/02/17/javascript-%E4%B8%AD-tdz-%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://dxy-developer.github.io/f2e/blog/2017/02/17/javascript-%E4%B8%AD-tdz-%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;刷微博期间看见 @ruanyf 提出了一个问题与 TDZ 有关，但是貌似阮大当时还没有意识到这个问题，多亏一些其他业内同仁提出了与 TDZ 相关；当然，以阮大的能力这都不是事。由于当时我本身也还不知道 TDZ 这一回事没有看懂，所以就花了一些时间去搞清楚什么是 TDZ 及TDZ会带来一些什么问题，本文主要是用于介绍我对 TDZ 的一些理解，如有问题，多谢指出。
&lt;/p&gt;

&lt;h4 id=&#34;示例&#34;&gt;示例&lt;/h4&gt;

&lt;h5 id=&#34;案例一&#34;&gt;案例一&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;代码
&lt;code&gt;javascript
let y = 1;
function foo(x = y, y) {
console.log(x);
}
foo();  // ReferenceError: y is not defined
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解读

&lt;ul&gt;
&lt;li&gt;当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；&lt;/li&gt;
&lt;li&gt;全局作用域、参数作用域、函数体作用域；&lt;/li&gt;
&lt;li&gt;当执行 foo 函数时，参数作用域在 x = y 之后才定义 let y，注意：let 定义，所以根据 let 定义变量的作用知道 x = y 肯定会报错；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function analysis() {
&amp;quot;use strict&amp;quot;;
let y = 1;

function foo() {  
    let x = arguments[0] !== (void 0) ? arguments[0] : y;   // y not defined
    let y = arguments[1];
}
foo();

return {};
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;案例二&#34;&gt;案例二&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;代码
&lt;code&gt;javascript
let y = 1;
function foo(x = function(){console.log(y)}, y = 2) {
x(); // 2
y = 3;
x(); // 3
}
foo();
console.log(y); //1
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解读

&lt;ul&gt;
&lt;li&gt;当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；&lt;/li&gt;
&lt;li&gt;全局作用域、参数作用域、函数体作用域；&lt;/li&gt;
&lt;li&gt;当执行 foo 函数时，x 被申明为匿名函数变量，此时函数并未被执行，所以正常；之后定义 y 值为 2，此时调用 x() 输出的当然是变量 y 的值，之后继续修改 y 的值，再继续调用 x()，输出 y 最新值 3；当执行外部 console.log(y) 时并不能访问内部函数变量，访问的变量是当前域下的 y = 1 的值 1，所以输出 1；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function analysis() {
&amp;quot;use strict&amp;quot;;
let y = 1;

function foo() {  
    let x = arguments[0] !== (void 0) ? arguments[0] : function() {
        console.log(y);
    };
    let y = arguments[1] !== (void 0) ? arguments[1] : 2;
    x(); // 2
    y = 3;
    x();    // 3
}
foo();
console.log(y); // 1

return {};
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;案例三&#34;&gt;案例三&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;代码
&lt;code&gt;javascript
let y = 1;
function foo(x = function(){console.log(y)}) {
let y = 3;
x(); // 1
}
foo();
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解读

&lt;ul&gt;
&lt;li&gt;当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；&lt;/li&gt;
&lt;li&gt;全局作用域、参数作用域、函数体作用域；&lt;/li&gt;
&lt;li&gt;当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，所以输出最外层变量 y 的值 1；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function analysis() {
&amp;quot;use strict&amp;quot;;
let y = 1;

function foo() {  
    let x = arguments[0] !== (void 0) ? arguments[0] : function() {
        console.log(y);
    };

    function funBody() {
        let y = 3;
        x();
    }
    funBody();
}
foo();

return {};
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;案例四&#34;&gt;案例四&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;代码
&lt;code&gt;javascript
function foo(x = function(){console.log(y)}) {
let y = 3;
x(); // // ReferenceError: y is not defined
}
foo();
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解读

&lt;ul&gt;
&lt;li&gt;当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；&lt;/li&gt;
&lt;li&gt;全局作用域、参数作用域、函数体作用域；&lt;/li&gt;
&lt;li&gt;当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，否则报 y 没有被定义错误，此案例只是案例三的一种测试；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function analysis() {
&amp;quot;use strict&amp;quot;;
function foo() {  
    let x = arguments[0] !== (void 0) ? arguments[0] : function() {
        console.log(y);
    };

    function funBody() {
        let y = 3;
        x();
    }
    funBody();
}
foo();

return {};
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;

&lt;p&gt;以上核心部分在代码翻译部分，通过配合一下资料及个人的理解，翻译出通俗易懂的代码：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters&#34;&gt;http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/google/traceur-compiler/issues/1604&#34;&gt;https://github.com/google/traceur-compiler/issues/1604&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>